#!/usr/bin/python
# -*- coding: utf-8 -*-

import numpy as np
from sklearn.isotonic import IsotonicRegression
from sklearn.pipeline import Pipeline

raw_data = [
    [2.81, 5.62],
    [7.14, 8.0],
    [2.72, 5.44],
    [3.87, 7.74],
    [1.9, 3.8],
    [7.82, 8.0],
    [7.02, 8.0],
    [5.5, 8.0],
    [9.15, 8.0],
    [4.87, 8.0],
    [8.08, 8.0],
    [5.58, 8.0],
    [9.13, 8.0],
    [0.14, 0.28],
    [2.0, 4.0],
    [5.47, 8.0],
    [0.8, 1.6],
    [4.37, 8.0],
    [5.31, 8.0],
    [0.0, 0.0],
    [1.78, 3.56],
    [3.45, 6.9],
    [6.13, 8.0],
    [3.53, 7.06],
    [4.61, 8.0],
    [1.76, 3.52],
    [6.39, 8.0],
    [0.02, 0.04],
    [9.69, 8.0],
    [5.33, 8.0],
    [6.37, 8.0],
    [5.55, 8.0],
    [7.8, 8.0],
    [2.06, 4.12],
    [7.79, 8.0],
    [2.24, 4.48],
    [9.71, 8.0],
    [1.11, 2.22],
    [8.38, 8.0],
    [2.33, 4.66],
    [1.83, 3.66],
    [5.94, 8.0],
    [9.2, 8.0],
    [1.14, 2.28],
    [4.15, 8.0],
    [8.43, 8.0],
    [5.68, 8.0],
    [8.21, 8.0],
    [1.75, 3.5],
    [2.16, 4.32],
    [4.93, 8.0],
    [5.75, 8.0],
    [1.26, 2.52],
    [3.97, 7.94],
    [4.39, 8.0],
    [7.53, 8.0],
    [1.98, 3.96],
    [1.66, 3.32],
    [2.04, 4.08],
    [11.72, 8.0],
    [4.64, 8.0],
    [4.71, 8.0],
    [3.77, 7.54],
    [9.33, 8.0],
    [1.83, 3.66],
    [2.15, 4.3],
    [1.58, 3.16],
    [9.29, 8.0],
    [1.27, 2.54],
    [8.49, 8.0],
    [5.39, 8.0],
    [3.47, 6.94],
    [6.48, 8.0],
    [4.11, 8.0],
    [1.85, 3.7],
    [8.79, 8.0],
    [0.13, 0.26],
    [1.44, 2.88],
    [5.96, 8.0],
    [3.42, 6.84],
    [1.89, 3.78],
    [1.98, 3.96],
    [5.26, 8.0],
    [0.39, 0.78],
    [6.05, 8.0],
    [1.99, 3.98],
    [1.58, 3.16],
    [3.99, 7.98],
    [4.35, 8.0],
    [6.71, 8.0],
    [2.58, 5.16],
    [7.37, 8.0],
    [5.77, 8.0],
    [3.97, 7.94],
    [3.65, 7.3],
    [4.38, 8.0],
    [8.06, 8.0],
    [8.05, 8.0],
    [1.1, 2.2],
    [6.65, 8.0],
    ]

data_x = []
data_y = []

for element in raw_data:
    data_x.append([element[0]])
    data_y.append(element[1])
    
data_x = np.array(data_x)
data_y = np.array(data_y)

model = IsotonicRegression()
model.fit(data_x, data_y)

if __name__ == '__main__':
    timeCharged = float(input().strip())
    pred_y = model.predict(np.array([[timeCharged]]))
    print(pred_y.tolist()[0])
